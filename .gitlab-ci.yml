# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: teracy/angular-cli:latest
#image: teracy/angular-cli:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-service
#services:
#  - mongo:latest

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache

before_script:
 # Install ssh-agent if not already installed, it is required by Docker.
 # (change apt-get to yum if you use a CentOS-based image)
 - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

 # Run ssh-agent (inside the build environment)
 - eval $(ssh-agent -s)

 # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
 - ssh-add <(echo "$SSH_PRIVATE_KEY")

 # For Docker builds disable host key checking. Be aware that by adding that
 # you are suspectible to man-in-the-middle attacks.
 # WARNING: Use this only with the Docker executor, if you use it with shell
 # you will overwrite your user's SSH config.
 - mkdir -p ~/.ssh
 - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
 # In order to properly check the server's host key, assuming you created the
 # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
 # instead.
 # - mkdir -p ~/.ssh
 # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
 - ls -l
 - cd ./server; npm install --silent --loglevel warn ; cd ..
 - cd ./front; npm install --silent  --loglevel warn ; cd ..
 - cd ./angular-src; npm install --silent  --loglevel warn ; cd ..

stages:
  - build
  - test
  - staging
  - deploy
  - production


cache:
  paths:
  - node_modules/

lint_backend:
  stage: build
  environment: dev
  script:
    - cd ./server; npm run lint
    
lint_angular:
  stage: build
  environment: dev
  script:
    - cd ./angular-src; ng lint

lint_frontend:
  stage: build
  environment: dev
  script:
    - cd ./front; npm run lint    

test:
 stage: test
 environment: dev
 script:    
   - echo "Test step"

deploy_to_staging:
 stage: build
 environment: staging   
 script:
   - echo "Go to staging"
   # try to connect to Staging
   - ssh yaro@192.168.0.104

   # try to clone yourself, the SSH_PRIVATE_KEY was added as deploy key to this repository
   - cd /home/yaro ; ./deploy.sh

 only: 
  - master
 when: on_success

deploy_to_production:
  stage: production
  environment: production
  script:
    - echo "Go to production"
    - cd ./front; ./node_modules/@angular/cli/bin/ng build
  only:
    - master
  when: manual

